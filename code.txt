#include <vector>
#include<bits/stdc++.h>
using namespace std;

vector<int> longestConsecutiveIncreasingSequence(int *arr, int n){
    vector<int> v;
	unordered_map<int,bool> mp;
    int maximum=INT_MIN;
    unordered_map<int,int> index;
    for(int i=0;i<n;i++){
        if(mp.count(arr[i])==0)
        {mp[arr[i]]=true;
        index[arr[i]]=i;}
    }
    int init;
    for(int i=0;i<n;i++){
        if(mp[arr[i]]==false)
        continue;    
        int start=arr[i];
        mp[start]=false;
        int length=1;
        start=start+1;
        while(mp[start]==true && mp.count(arr[i])==1){
            mp[start]=false;
            start++;
            length++;
        }
        start=arr[i]-1;
        while(mp[start]==true && mp.count(arr[i])==1){
            mp[start]=false;
            start--;
            length++;
        }
        if(maximum==length){
            if(index[init]>index[start+1]){
                init=start+1;
            }
        }
          if(maximum<length){
              init=start+1;
              //index=i;
              maximum=length;
        }
    }
    for(int i=init;i<init+maximum;i++){
        v.push_back(i);
    }
    return v;
}
#include<bits/stdc++.h>
using namespace std;
int main() {
    int t,n,k;
    cin>>t;
    for(int i=0;i<t;i++){
        cin>>n>>k;
        int boxes[n];
        for(int i=0;i<n;i++){
            cin>>boxes[i];
        }
        int min_candies=0,max_candies=*max_element(boxes,boxes+n),check=-1,current_max=0,sum;
        int start=0,end=max_candies;
        while(start<=end){
            check=(start+end)/2;
            sum=0;
            for(int i=0;i<n;i++){
                sum=sum+(boxes[i]/check);
                
            }
            if(sum>=k){
                
                current_max=check;
                start=check+1;
               
                
            }
            else{
                end=check-1;
                
            }
            
        }
        cout<<current_max<<endl;
    }

	// Write your code here
}




#include <bits/stdc++.h>
using namespace std;

vector<int> longestConsecutiveIncreasingSequence(int *arr, int n){
	//Your Code goes here
    map <int,bool> Directory;
    map <int,int> Index_map;
    vector <int> ans;
    for(int i=0;i<n;i++){
        if(Directory.find(arr[i])==Directory.end()){
            Directory.insert(pair <int,bool> (arr[i],1));
        }
        
    }
    for(int i=0;i<n;i++){
        if(Index_map.find(arr[i])==Index_map.end()){
            Index_map.insert(pair <int,int> (arr[i],i));
        }
    }
    int max_length=0,max_start=-1,current_length=0,current_start=0,next;
    map <int,bool> :: iterator it;
    map <int,bool> :: iterator pivot;
    map <int,int> :: iterator pt;
    map <int,int> :: iterator pt1;
    for(it=Directory.begin();it!=Directory.end();it++){
        if(it->second!=0){
            current_start=it->first;
            next=current_start+1;
            current_length=1;
            it->second=0;
            while(Directory.find(next)!=Directory.end()){
                pivot=Directory.find(next);
                if(pivot->second!=0){
                    pivot->second=0;
                	current_length+=1;
                	next+=1;
                }
                
            }
            if(current_length>max_length){
                max_length=current_length;
                max_start=current_start;
            }
            if(current_length==max_length){
                pt=Index_map.find(current_start);
                pt1=Index_map.find(max_start);
                if(pt->second<pt1->second){
                    max_start=current_start;
                }
                else{
                    
                }
            }
            
        }
        ans.push_back(max_start);
        for(int i=1;i<max_length;i++){
            ans.push_back(max_start+i);
            
        }
        return ans;
    }
    
}