bool findEmpty(int board[][9],int &row,int &col){
    for(int i=0;i<9;i++){
        for(int j=0;j<9;j++){
            if(board[i][j]==0){
                row=i;
                col=j;
                return true;
            }
        }
    }
    return false;
}
bool IsafeRow(int board[][9],int row,int num){
    for(int i=0;i<9;i++){
        if(board[row][i]==num){
            return false;
        }
    }
    return true;
}
bool IssafeCol(int board[][9],int col,int num){
    for(int i=0;i<9;i++){
        if(board[i][col]==num){
            return false;
        }
    }
    return true;
}
bool IssafeGrid(int board[][9],int row,int col,int num){
    int RowFactor=row-(row%3);
    int ColFactor=col-(col%3);
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            if(board[i+RowFactor][j+ColFactor]==num){
                return false;
            }
        }
    }
    return true;
}
bool Issafe(int board[][9],int row,int col,int num){
    if(IsafeRow(board,row,num) && IssafeCol(board,col,num) && IssafeGrid(board,row,col,num)){
        return true;
    } 
    return false;
}
bool sudokuSolver(int board[][9]){

  /* Don't write main().
   *  Don't read input, it is passed as function argument.
   *  Don't print output and return output as specified in the question
  */
    int row,col;
	//indEmpty(board[][9],0,0);
    if(!findEmpty(board,row,col)){
        return true;
    }
    for(int i=1;i<10;i++){
        if(Issafe(board,row,col,i)){
            board[row][col]=i;
            if(sudokuSolver(board)){
                return true;
            }
            board[row][col]=0;
            
        }
    }
    return false;

}
